{
	"info": {
		"_postman_id": "491c7ee8-0b45-4a9e-b4b8-5e5217646b24",
		"name": "dz2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name = Alexey\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alexey\");\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age = 29\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"29\");\r",
							"});\r",
							"\r",
							"//6)Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary = 1000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = pm.request.data;\r",
							"\r",
							"//8) Проверить, что name в ответе равно name s request (name забрать из request) \r",
							"pm.test(\"Your test name = Alexey request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"console.log(request.data.name) //вытащил имя из request(запроса).\r",
							"\r",
							"//9) Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age = 29 request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"console.log(request.data.age) //вытащил age из request(запроса).\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary salary request (salary забрать из request.)\r",
							"pm.test(\"Your test salary = 1000 request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+request.data.salary);\r",
							"});\r",
							"console.log(request.data.salary) //вытащил salary из request(запроса) и преобразовал в число.\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4 (salary забрать из request\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alexey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alexey",
							"disabled": true
						},
						{
							"key": "age",
							"value": "29",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name c request (name забрать из request)\r",
							"pm.test(\"Your test  name response = name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"console.log(jsonData.name)\r",
							"console.log(req.name)\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"  pm.test(\"Your test age response = age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"console.log(jsonData.age)\r",
							"console.log(req.age)\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary response = salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"console.log(jsonData.salary)\r",
							"console.log(req.salary)\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('dog has a name', function() {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('dog have a age', function() {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Your test name=Luky \", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(`Luky`);\r",
							"});\r",
							"console.log(jsonData.family.pets.dog.name)\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Your test age=4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"console.log(jsonData.family.pets.dog.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alexey",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "29",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alexey&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alexey"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Your test name response=name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"console.log(jsonData.name)\r",
							"console.log(req.name)\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test age response=age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.age);// + превращает строку в число\r",
							"});\r",
							"console.log(jsonData.age)\r",
							"console.log(req.age)\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary response[0] = salary request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary); // + превращает строку в число\r",
							"});\r",
							"console.log(+req.salary) // проверили, что + превращает строку в число\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary response[1] = (salary*2) request\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary response[2] = (salary*3) request\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(jsonData.salary);//смотрю, что у меня вообще есть в salary\r",
							"//пробую писать цикл - но ничего не понимаю \r",
							"//работает но хз почему\r",
							"for(var salary of jsonData.salary){\r",
							"console.log('salary_cycle', salary)\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alexey&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alexey"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//7. Спарсить request.\r",
							"var req = pm.request.data;\r",
							"console.log(request.data)\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json has 'start_qa_salary'\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json has person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary is request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+request.data.salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 is request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+request.data.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 is request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+request.data.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 is request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(request.data.salary*3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 is request\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(request.data.salary*3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"console.log(jsonData.person.u_name) //посмотреть что там есть\r",
							"pm.test(\"person[1]=salary is request\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"console.log(jsonData.person.u_age) //посмотреть что там есть\r",
							"pm.test(\"u_age=age is request\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+request.data.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"console.log(jsonData.person) //посмотреть, что внутри\r",
							"pm.test(\"u_salary_5_years = salary*4.2 is request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(request.data.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(jsonData.person)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}